A Kinder macOS Update

*******************************************************************************************
A workflow for more user intuitive macOS updates.  Allowing the user to defer updates to 
a more convenient time after updates become available, while allowing for greater assurance
that security updates are being applied to IT.
*******************************************************************************************

This script is designed to be used with Jamf pro, a Self-Service policy, and a local 
launchd agent to ensure updates are checked for daily.

**Requirements:

   • Jamf Pro
   • A logged in user
   • MacOS Clients 10.13 or later (testing prior to 10.13.4 has not been performed)
   • Composer

**Why I built this:

Jamf, at the time of this writing, did not have a good deferral process for 
Apple OS updates in my opinion.  Not only had apple introduced a new reboot state 
into their post-update reboots that Jamf had not integrated yet, but Jamf's baked in
deferral process only allowed a user to defer up to a date. Requiring at the next update
I would be forced to go out and set up a new deferral date.  These scripts work as 2 
halves to a solution. The deferral script runs locally on a daily basis thanks to
a launchd daemon and the SoftwareUpdate script is hosted on Jamf.  Each time it is run the
deferral script checks if there are any updates available and, if updates are found, it
nags the user to allow the updates to be installed.  As any IT person can attest though, 
there needs to be some teeth so the deferral script allows for only a set number of 
deferrals before enforcing the updates anyways via triggering a Jamf policy.

**Configuring the process:

1. Pick a place to store the local components.  (example: the deferral script and icon)
   a. I choose /Library/Application Support/MyOrgName, but you can pick anywhere that launchd
      can reach.
2. Pick a place to store the logs for both the deferral script and the update script.
   a. I choose /Library/Logs/MyOrgName but as long as it is a permanent location that you can
      remembe to look back to when/if something goes wrong then it should work for you.
3. Pick/make an icon to be used by the hud windows.
4. Pick a custom trigger name to input into your deferral script. (I used AppleUpdateScript)
5. Edit both scripts’ variables section to record your homes for the above. (Logs, Deferral script location, icon location).  Also edit the daemon plist with the location of the deferral script and the time you want the deferral script to fire off daily.
6. Package the plist, deferral script, icon, and new log folder up all pretty in Composer.  
   You will need to add a postinstall bash script in Composer to load the launchd daemon.  
   Example one liner below: 
 
   sudo launchctl load /Library/LaunchAgents/com.YourOrg.SoftwareUpdate.plist

7. Upload your edited SoftwareUpdate4.sh script to Jamf
8. Create 2 policies in Jamf.
   a. Software Update Script execution policy.
      • This policy will execute the SoftwareUpdate4.sh script.
      • It should have a custom trigger that is input into your deferral script
      • Make sure this policy can be triggered from Self-Service as well.  Allowing it to 
        be executed from self-service will allow users to start the updates whenever they
        want (aka when it is more convenient), not just when the nag annoys them mid-morning.
   b. A policy to push and install the .pkg you packaged earlier in composer.
      • This policy should be set to run once per computer at check-in.

**Stuff I am still working on:
   • Getting the script templatized correctly to accept config changes from a profile 
     distributed from Jamf.  The deferral script is almost there, AppleUpdate4 is not.
   • Bug testing
   • Inserting API work into the deferral script to update JSS that the script is failing.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
